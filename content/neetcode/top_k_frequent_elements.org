#+title: Top K Frequent Elements
#+author: Troy Fischer
#+setupfile: ../themes/org/troy-story.setup
#+include: ../header.org

Problem: [[https://leetcode.com/problems/top-k-frequent-elements/][Top K Frequent Elements]]

* Question
Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
** Example 1
#+begin_example
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
#+end_example
** Example 2
#+begin_example
Input: nums = [1], k = 1
Output: [1]
#+end_example
** Constraints
+ 1 <= nums.length <= 105
+ -104 <= nums[i] <= 104
+ k is in the range [1, the number of unique elements in the array].
+ It is guaranteed that the answer is unique.
** Follow up
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
* Thoughts
** Naive but works
- Map the count to the element(s)
- sort keys greatest to least
- add elements to answer while subtracting from k until k == 0


#+begin_src python
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
#+end_src

** Follow up

priority queue?
